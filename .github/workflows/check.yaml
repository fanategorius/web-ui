#
# CI for this project needs to do two things:
#   1. Setup the environment and run `yarn build`
#   2. Build the distribution rpm for use in QE/OST/Integration testing
#
name: run CI on PRs
on:
  pull_request:

jobs:
  test_el8_offline:
    name: EL8 (ovirt-engine-nodejs-modules build) - test, build and publish rpm repo for the PR
    env:
      OFFLINE_BUILD: 1

    runs-on: ubuntu-latest
    container:
      #
      # Note: The ovirt build container will have all of the spec's `BuildRequires`
      #       packages already installed.  Therefore, no additional contianer setup
      #       is needed.
      #
      image: quay.io/ovirt/buildcontainer:el8stream

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Run automation/build.sh (installs build dependencies as necessary)
        run: ./automation/build.sh

      - name: Upload artifacts
        uses: ovirt/upload-rpms-action@v2
        with:
          directory: exported-artifacts/

  test_el8_online:
    name: EL8 (online build) - test and build the PR, but skip the rpm builds

    runs-on: ubuntu-latest
    container:
      image: quay.io/ovirt/buildcontainer:el8stream

    steps:
      - name: Install yarn (online mode does not use ovirt-engine-nodejs-modules so yarn isn't installed)
        run: |
          dnf -y config-manager --add-repo https://dl.yarnpkg.com/rpm/yarn.repo
          dnf -y --disablerepo='*' --enablerepo='yarn*' install yarn

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Run 'yarn install' and 'yarn build' (like a developer would)
        run: |
          yarn install
          yarn build

      #
      # Note: The source tar, srpm and rpm are not needed for the online build.  We only
      #       need 1 rpm repo artifact per distro.  The rpm repo is generated from the
      #       offline build.
      #

  test_el9_offline:
    name: EL9 (ovirt-engine-nodejs-modules build) - test, build and publish rpm repo for the PR
    env:
      OFFLINE_BUILD: 1

    runs-on: ubuntu-latest
    container:
      image: quay.io/ovirt/buildcontainer:el9stream

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Run automation/build.sh (installs build dependencies as necessary)
        run: ./automation/build.sh

      - name: Upload artifacts as rpm repo
        uses: ovirt/upload-rpms-action@v2
        with:
          directory: exported-artifacts/
